kang_nose_i <- predict(lm_kang, newdata = nose_width_new)
res <- kang_nose_i - kang_nose[1,]
res
rmse = sqrt(1/1*(res^2))
View(rmse)
#Llamamos a la función predict
res <- list()
for (kang in kang_nose){
kang_nose_i <- predict(lm_kang, newdata = kang)
res.append(kang_nose_i)
}
#Llamamos a la función predict
res <- list()
for (row in nrow(kang_nose)){
kang = kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res.append(kang_nose_i)
}
#Llamamos a la función predict
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang = kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
kang_nose[1,]
#Llamamos a la función predict
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang = kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
#Llamamos a la función predict
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
#Llamamos a la función predict
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
#Llamamos a la función predict
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
#Llamamos a la función predict
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
#Llamamos a la función predict
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
#Llamamos a la función predict
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
nrow(kang_nose)
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
print(row)
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
kang <- kang_nose[1,]
kang_nose_i <- predict(lm_kang, newdata = kang)
kang_nose_i
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
kang <- kang_nose[2,]
kang_nose_i <- predict(lm_kang, newdata = kang)
kang_nose_i
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
kang <- kang_nose[3,]
kang_nose_i <- predict(lm_kang, newdata = kang)
kang_nose_i
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
kang <- kang_nose[4,]
kang_nose_i <- predict(lm_kang, newdata = kang)
kang_nose_i
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
print(row)
flush.console()
}
res
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
print(row)
}
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
for (row in nrow(kang_nose)){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
cat(row)
}
res
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
for (i in 45){
kang <- kang_nose[row,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[row]] <- kang_nose_i
}
res
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
for (i in 45){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[i]] <- kang_nose_i
}
res
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
while(i <= nrow(kang_nose)){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[i]] <- kang_nose_i
i = i +1
}
res
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[i]] <- kang_nose_i - kang_nose[i,]
i = i + 1
}
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[i]] <- kang_nose[i,] -  kang_nose_i
i = i + 1
}
library(class)
nose_width_new <- kang_nose[1,]
kang_nose_i <- predict(lm_kang, newdata = nose_width_new)
kang_nose[1,] - kang_nose_i
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[i]] <- (kang -kang_nose_i)
i = i + 1
}
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[i] <- (kang - kang_nose_i)
i = i + 1
}
rmse = sqrt((1/n))
View(res)
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[[i]] <- (kang - kang_nose_i)
i = i + 1
}
res <- rep(0, nrow(kang_nose))
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[i] <- (kang - kang_nose_i)
i = i + 1
}
rmse = sqrt((1/n))
View(res)
res[1]
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[i] <- (kang - kang_nose_i)
i = i + 1
}
rmse = sqrt((1/n) * sum(res^2))
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[i] <- (kang - kang_nose_i)^2
i = i + 1
}
rmse = sqrt((1/n) * sum(res))
reduce(res)
reduce(res, "+")
Reduce(res, "+")
Reduce("+", res)
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[i] <- (kang - kang_nose_i)^2
i = i + 1
}
rmse = sqrt((1/n) * reduce('+', res))
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[i] <- (kang - kang_nose_i)^2
i = i + 1
}
rmse = sqrt((1/n) * Reduce('+', res))
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[i] <- (kang - kang_nose_i)^2
i = i + 1
}
rmse = sqrt((1/n) * Reduce('+', res))
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[i] <- (kang - kang_nose_i)^2
i = i + 1
}
rmse = sqrt((1/n) * Reduce('+', res))
rmse
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
res_sq <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[i] <- (kang - kang_nose_i)
res_sq[i] <- (kang - kang_nose_i)^2
i = i + 1
}
rmse = sqrt((1/n) * Reduce('+', res))
rmse
#Llamamos a la función predict
lm_kang <- lm(nose_length~nose_width ,data = kang_nose)
lm_kang
res <- rep(0, nrow(kang_nose))
res_sq <- rep(0, nrow(kang_nose))
i = 1
n = nrow(kang_nose)
while(i <= n){
kang <- kang_nose[i,]
kang_nose_i <- predict(lm_kang, newdata = kang)
res[i] <- (kang - kang_nose_i)
res_sq[i] <- (kang - kang_nose_i)^2
i = i + 1
}
rmse = sqrt((1/n) * Reduce('+', res_sq))
rmse
View(res)
summary(lm_kang)$r.squared
summary(lm_kang)$r.squared
ss_res <- res_sq
summary(lm_kang)$r.squared
knitr::opts_chunk$set(echo = TRUE)
world_bank_train <-read.delim("./data/world_bank_train.csv", sep = "\t", head = TRUE)
View(world_bank_train)
lm_world_bank <- lm(cgdp~urb_pop ,data = world_bank_train)
lm_world_bank
lm_world_bank <- lm(cgdp~urb_pop ,data = world_bank_train)
pred_afg <- predict(lm_world_bank, newdata = 413)
lm_world_bank <- lm(cgdp~urb_pop ,data = world_bank_train)
p <- world_bank_train[1,]
pred_afg <- predict(lm_world_bank, newdata = 413)
View(p)
lm_world_bank <- lm(cgdp~urb_pop ,data = world_bank_train)
p <- world_bank_train[1,]
p$cgdp <- 413
pred_afg <- predict(lm_world_bank, newdata = p)
lm_world_bank <- lm(cgdp~urb_pop ,data = world_bank_train)
p <- world_bank_train[1,]
p$cgdp <- 413
pred_afg <- predict(lm_world_bank, newdata = p)
pred_afg
plot(urb_pop ~ log(cgdp), data = world_bank_train,
xlab = "log(GDP per Capita)",
ylab = "Percentage of urban population")
# Linear model: change the formula
lm_wb <- lm(urb_pop ~ log(cgdp),
data = world_bank_train)
lm_world_bank <- lm(urb_pop~cgdp ,data = world_bank_train)
p <- world_bank_train[1,]
p$cgdp <- 413
pred_afg <- predict(lm_world_bank, newdata = p)
pred_afg
pred_afg_2 <- predict(lm_wb, newdata = p)
pred_afg_2
shop <-read.delim("./data/shop.csv", sep = "\t", head = TRUE)
shop <-read.delim("./data/sales.csv", sep = "\t", head = TRUE)
View(shop)
plot(sales ~ sq_fit, data = shop,
xlab = "Shop size",
ylab = "Sales")
plot(sales ~ sq_ft, data = shop,
xlab = "Shop size",
ylab = "Sales")
plot(sales ~ sq_ft, data = shop,
xlab = "Shop size",
ylab = "Sales")
plot(sales ~ inv, data = shop,
xlab = "Inv",
ylab = "Sales")
plot(sales ~ sq_ft, data = shop,
xlab = "Shop size",
ylab = "Sales")
plot(sales ~ inv, data = shop,
xlab = "Inv",
ylab = "Sales")
plot(sales ~ ads, data = shop,
xlab = "Ads",
ylab = "Sales")
plot(sales ~ size_dist, data = shop,
xlab = "Size Dist",
ylab = "Sales")
plot(sales ~ sq_ft, data = shop,
xlab = "Shop size",
ylab = "Sales")
plot(sales ~ inv, data = shop,
xlab = "Inv",
ylab = "Sales")
plot(sales ~ ads, data = shop,
xlab = "Ads",
ylab = "Sales")
plot(sales ~ size_dist, data = shop,
xlab = "Size Dist",
ylab = "Sales")
plot(sales ~ comp, data = shop,
xlab = "Comp",
ylab = "Sales")
knitr::opts_chunk$set(echo = TRUE)
lm_shop <- lm(sales ~., data= shop)
plot(lm_shop$fitted.values, lm_shop$residuals,
xlab = "Fitted values", ylab = "Residuals")
lm_shop <- lm(sales ~., data= shop)
lm_shop
qqnorm(lm_shop$residuals, ylab = "Residual Quantiles")
